# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

####################################################
# .zshrc: franck's main configuration file for zsh #
####################################################

##############################################################
# Profiling of shell startup can be enabled for analysis here.

PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
    # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
    PS4=$'%D{%M%S%.} %N:%i> '
    exec 3>&2 2>$HOME/tmp/startlog.$$
    setopt xtrace prompt_subst
fi

##################################################
# Global variable determining the current OS used.

export HOST_OS=`uname`

################
# Login in a TTY

[[ "$HOST_OS" = "Linux" && -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx &> /dev/null

####################################
# Useful function used in this file.

load_if_exists() {
    filename=$1

    if [ -f "$filename" ]; then
        source "$filename"
    fi
}

############################################################################
# This file may contain additional variables that are generated out of bound
# and can be used in the configuration below.

load_if_exists "${HOME}/.zshrc_gen"

#####################
# Main Configuration

HISTFILE=~/.histfile
HISTSIZE=1000000
SAVEHIST=$HISTSIZE

autoload -Uz compinit
compinit

setopt correct
setopt hist_ignore_all_dups     # Don't put any duplicates in history.
setopt hist_reduce_blanks       # Reduce amount of superfluous blank spaces in history.
setopt no_bang_hist             # Don't redefine ! (useful for commit messages etc...).
setopt nobeep
setopt transient_rprompt        # Don't keep RPROMPT when command is entered.
setopt prompt_subst
setopt interactivecomments      # Allow comments in interactive shell.

##############################################################
# Aliases + Keyboard configuration + Completion configuration.

load_if_exists "${HOME}/.zsh/aliases.sh"
load_if_exists "${HOME}/.zsh/keyboard.sh"
load_if_exists "${HOME}/.zsh/completion.sh"

#######################
# Prompt Configuration
source "${HOME}/.zsh/bundle/powerlevel10k/powerlevel10k.zsh-theme"

##########
# Aliases

alias find='noglob find'
alias reload='. ${HOME}/.zshrc'

###################################
# Virtualenv wrapper configuration.

export WORKON_HOME="$HOME/.virtualenvs"

function virtualenvwrapper_install {
    VENV_WRAPPER=$1

    if [ -f "$VENV_WRAPPER" ]; then
        # Create and install virtualenv directory.
        mkdir -p "$WORKON_HOME"
        # Load the virtualenv wrapper source.
        source "$VENV_WRAPPER"
    fi
}

virtualenv_funcs=(workon deactivate mkvirtualenv)

function virtualenvwrapper_load_and_call {
    unset -f "${virtualenv_funcs[@]}"

    if [ "$HOST_OS" = "Linux" ]; then
        virtualenvwrapper_install "/usr/bin/virtualenvwrapper.sh"
        virtualenvwrapper_install "/usr/share/virtualenvwrapper/virtualenvwrapper.sh"
    elif [ "$HOST_OS" = "Darwin" ]; then
        virtualenvwrapper_install "/usr/local/bin/virtualenvwrapper.sh"
        virtualenvwrapper_install "/opt/homebrew/bin/virtualenvwrapper.sh"
    fi

    "$@"
}

for func in "${virtualenv_funcs[@]}"; do
    eval "${func}() { virtualenvwrapper_load_and_call ${func} \"\$@\"; }"
done

#####################################
# Add brew bin directories on MacOSX.

PATH="/opt/homebrew/bin:${HOME}/.zsh/bin:${HOME}/.local/bin:${PATH}"

if [ -n "${BREW_PREFIX}" ]; then
    PATH="$PATH:${BREW_PREFIX}/sbin:${BREW_PREFIX}/bin"
fi

if [ -d "/opt/homebrew/opt/rabbitmq/sbin" ]; then
    PATH="$PATH:/opt/homebrew/opt/rabbitmq/sbin"
fi

export PATH

######################################################
# Including .zsh_opt, location specific configuration.

load_if_exists "${HOME}/.zshrc_opt"

#############################################################################
# Now finally, set the mandatory env variables that are mandatory to defaults
# if they are not set.
if [ -z "$EMAIL" ]; then
    export EMAIL="franck@michea.dev"
fi

# EOF

if [[ "$PROFILE_STARTUP" == true ]]; then
    unsetopt xtrace
    exec 2>&3 3>&-
fi

# Disable brew analytics
if hash brew &> /dev/null; then
    brew analytics off 2>&1 > /dev/null
fi

####################
# Load direnv hooks.
if which direnv > /dev/null; then
    eval "$(direnv hook zsh)"
fi

####################
# NVM configuration.
export NVM_DIR="$HOME/.nvm"

# This loads nvm.
load_if_exists "/opt/homebrew/opt/nvm/nvm.sh"
load_if_exists "/usr/local/opt/nvm/nvm.sh"

# This loads nvm bash_completion.
load_if_exists "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
load_if_exists "/usr/local/opt/nvm/etc/bash_completion.d/nvm"

####################
# Yarn configuration
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

#######
# Z-ZSH
load_if_exists "${HOME}/.zsh/bundle/zsh-z/zsh-z.plugin.zsh"

################################################################
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
load_if_exists "${HOME}/.p10k.zsh"

########
# chruby
load_if_exists "/opt/homebrew/opt/chruby/share/chruby/chruby.sh"
load_if_exists "/usr/local/opt/chruby/share/chruby/chruby.sh"

#######
# Ruby from Homebrew PATH.
export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
